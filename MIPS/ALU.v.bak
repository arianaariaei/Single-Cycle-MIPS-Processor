module ALU (
  input [31:0] a,
  input [31:0] b,
  input [3:0] op,
  output reg [31:0] result,
  output reg Z,
  output reg N,
  output reg V,
  output reg C
);

  always @(*) begin
    result = 0;
    Z = 1'b1;
    N = 1'b0;
    V = 1'b0;
    C = 1'b0;

    case (op)
      4'b0000: begin // Add
        result = a + b;
        N = result[31];
        V = (a[31] ^ b[31]) & (result[31] ^ a[31]);
        C = a[30] & b[30];
      end

      4'b0001: begin // Subtract
        result = a - b;
        N = result[31];
        V = (a[31] ^ ~b[31]) & (result[31] ^ a[31]);
        C = a[30] & ~b[30];
      end

      4'b0010: begin // Increment a by 1
        result = a + 1;
        N = result[31];
        V = a[30];
      end

      4'b0011: begin // Decrement a by 1
        result = a - 1;
        N = result[31];
        V = a[30];
      end

      4'b0100: begin // Increment b by 1
        result = b + 1;
        N = result[31];
        V = b[30];
      end

      4'b0101: begin // Decrement b by 1
        result = b - 1;
        N = result[31];
        V = b[30];
      end

      4'b1000: begin // And
        result = a & b;
        Z = (result == 0);
      end

      4'b1001: begin // Or
        result = a | b;
        Z = (result == 0);
      end

      4'b1010: begin // Nand
        result = ~(a & b);
        Z = (result == 0);
      end

      4'b1011: begin // Nor
        result = ~(a | b);
        Z = (result == 0);
      end

      4'b1100: begin // Xor
        result = a ^ b;
        Z = (result == 0);
      end

      4'b1101: begin // Not (a)
        result = ~a;
        Z = (result == 0);
      end

      default: begin
      end
    endcase

    if (result == 0) begin
      Z = 1'b1;
    end

    if (result[31]) begin
      N = 1'b1;
    end
  end

endmodule
